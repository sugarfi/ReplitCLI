/// <reference types="node" />
import { EventEmitter } from 'events';
import { api } from '@replit/protocol';
import { Channel } from './channel';
declare enum ConnectionState {
    CONNECTING = 0,
    CONNECTED = 1,
    DISCONNECTED = 2
}
interface UrlOptions {
    secure: boolean;
    host: string;
    port: string;
}
interface TxRx {
    direction: 'in' | 'out';
    cmd: api.Command;
}
declare type DebugLog = {
    type: 'breadcrumb';
    message: string;
    data?: unknown;
} | {
    type: 'log';
    log: TxRx;
} | {
    type: 'ping';
    latency: number;
};
declare type DebugFunc = (log: DebugLog) => void;
interface ConnectOptions {
    token: string;
    urlOptions?: UrlOptions;
    polling?: boolean;
    timeout?: number | null;
    WebSocketClass?: typeof WebSocket;
}
export declare class Client extends EventEmitter {
    containerState: api.ContainerState.State | null;
    connectionState: ConnectionState;
    private token;
    private ws;
    private channels;
    private deferredReady;
    private debug;
    private didConnect;
    static getConnectionStr(token: string, urlOptions: UrlOptions): string;
    constructor(debug?: DebugFunc);
    isConnected: () => boolean;
    connect: (options: ConnectOptions) => Promise<void>;
    openChannel: ({ name, service, action, }: {
        name?: string | undefined;
        service: string;
        action?: api.OpenChannel.Action | undefined;
    }) => Channel;
    close: () => void;
    getChannel(id: number): Channel;
    getToken(): string | null;
    setDebugFunc(debugFunc: DebugFunc): void;
    private send;
    private onSocketMessage;
    private handleOpenChanRes;
    private handleCloseChannel;
    private onClose;
    private onSocketClose;
    private tryConnect;
    private startPing;
}
export {};
