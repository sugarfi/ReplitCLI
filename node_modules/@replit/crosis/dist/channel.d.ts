/// <reference types="node" />
import { EventEmitter } from 'events';
import { api } from '@replit/protocol';
export declare class Channel extends EventEmitter {
    static ChannelClosedErrorMessage: string;
    state: api.OpenChannelRes.State.CREATED | api.OpenChannelRes.State.ATTACHED | null;
    id: number | null;
    isOpen: boolean;
    closed: boolean;
    private sendQueue;
    private sendToClient;
    private requestMap;
    constructor();
    send: (cmdJson: api.ICommand) => void;
    request: (cmdJson: api.ICommand) => Promise<api.Command>;
    close: (action?: api.CloseChannel.Action) => Promise<api.ICloseChannelRes>;
    onOpen: (id: number, state: api.OpenChannelRes.State.CREATED | api.OpenChannelRes.State.ATTACHED, send: (cmd: api.Command) => void) => void;
    onOpenError: ({ error: err }: api.IOpenChannelRes) => void;
    onCommand: (cmd: api.Command) => void;
    onClose: (closeChanRes: api.ICloseChannelRes) => void;
    private enqueueSend;
}
declare function command(cmd: api.Command): void;
declare function error({ message }: {
    message: string;
}): void;
declare function open(): void;
declare function close(closeChanRes: api.ICloseChannelRes): void;
export declare interface Channel extends EventEmitter {
    on(event: 'command', listener: typeof command): this;
    on(event: 'error', listener: typeof error): this;
    on(event: 'close', listener: typeof close): this;
    on(event: 'open', listener: typeof open): this;
    addListener(event: 'command', listener: typeof command): this;
    addListener(event: 'error', listener: typeof error): this;
    addListener(event: 'close', listener: typeof close): this;
    addListener(event: 'open', listener: typeof open): this;
    once(event: 'command', listener: typeof command): this;
    once(event: 'error', listener: typeof error): this;
    once(event: 'close', listener: typeof close): this;
    once(event: 'open', listener: typeof open): this;
    prependListener(event: 'command', listener: typeof command): this;
    prependListener(event: 'error', listener: typeof error): this;
    prependListener(event: 'close', listener: typeof close): this;
    prependListener(event: 'open', listener: typeof open): this;
    prependOnceListener(event: 'command', listener: typeof command): this;
    prependOnceListener(event: 'error', listener: typeof error): this;
    prependOnceListener(event: 'close', listener: typeof close): this;
    prependOnceListener(event: 'open', listener: typeof open): this;
    off(event: 'command', listener: typeof command): this;
    off(event: 'error', listener: typeof error): this;
    off(event: 'close', listener: typeof close): this;
    off(event: 'open', listener: typeof open): this;
    removeListener(event: 'command', listener: typeof command): this;
    removeListener(event: 'error', listener: typeof error): this;
    removeListener(event: 'close', listener: typeof close): this;
    removeListener(event: 'open', listener: typeof open): this;
    emit(event: 'command', ...args: Parameters<typeof command>): boolean;
    emit(event: 'error', ...args: Parameters<typeof error>): boolean;
    emit(event: 'close', ...args: Parameters<typeof close>): boolean;
    emit(event: 'open', ...args: Parameters<typeof open>): boolean;
    removeAllListeners(event?: 'command' | 'error' | 'close' | 'open'): this;
    eventNames(): Array<'command' | 'error' | 'close' | 'open'>;
}
export {};
