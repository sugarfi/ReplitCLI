"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var protocol_1 = require("@replit/protocol");
var deferred_1 = require("./deferred");
var Channel = (function (_super) {
    __extends(Channel, _super);
    function Channel() {
        var _this = _super.call(this) || this;
        _this.send = function (cmdJson) {
            cmdJson.channel = _this.id;
            _this.sendToClient(protocol_1.api.Command.create(cmdJson));
        };
        _this.request = function (cmdJson) { return __awaiter(_this, void 0, void 0, function () {
            var ref, deferred;
            return __generator(this, function (_a) {
                ref = Number(Math.random()
                    .toString()
                    .split('.')[1]).toString(36);
                deferred = deferred_1.createDeferred();
                this.requestMap[ref] = deferred;
                cmdJson.ref = ref;
                this.send(cmdJson);
                return [2, deferred.promise];
            });
        }); };
        _this.close = function (action) {
            if (action === void 0) { action = protocol_1.api.CloseChannel.Action.TRY_CLOSE; }
            return __awaiter(_this, void 0, void 0, function () {
                var cmd;
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.closed === true) {
                        throw new Error('Channel already closed');
                    }
                    cmd = protocol_1.api.Command.create({
                        channel: 0,
                        closeChan: {
                            action: action,
                            id: this.id,
                        },
                    });
                    this.sendToClient(cmd);
                    this.onCommand = function () { return undefined; };
                    this.send = function () { return undefined; };
                    this.closed = true;
                    return [2, new Promise(function (resolve) {
                            _this.once('close', function (closeRes) {
                                resolve(closeRes);
                            });
                        })];
                });
            });
        };
        _this.onOpen = function (id, state, send) {
            _this.id = id;
            _this.sendToClient = send;
            _this.state = state;
            _this.isOpen = true;
            var cmd = _this.sendQueue.shift();
            while (cmd) {
                _this.send(cmd);
                cmd = _this.sendQueue.shift();
            }
            _this.emit('open');
        };
        _this.onOpenError = function (_a) {
            var err = _a.error;
            _this.emit('error', { message: err || '' });
        };
        _this.onCommand = function (cmd) {
            _this.emit('command', cmd);
            if (cmd.ref && _this.requestMap[cmd.ref]) {
                _this.requestMap[cmd.ref].resolve(cmd);
                delete _this.requestMap[cmd.ref];
            }
        };
        _this.onClose = function (closeChanRes) {
            Object.keys(_this.requestMap).forEach(function (ref) {
                _this.requestMap[ref].reject(new Error(Channel.ChannelClosedErrorMessage));
                delete _this.requestMap[ref];
            });
            _this.isOpen = false;
            _this.closed = true;
            _this.emit('close', closeChanRes);
            _this.removeAllListeners();
        };
        _this.enqueueSend = function (cmd) { return _this.sendQueue.push(cmd); };
        _this.state = null;
        _this.id = null;
        _this.isOpen = false;
        _this.closed = false;
        _this.sendQueue = [];
        _this.sendToClient = _this.enqueueSend;
        _this.requestMap = {};
        return _this;
    }
    Channel.ChannelClosedErrorMessage = 'Channel closed';
    return Channel;
}(events_1.EventEmitter));
exports.Channel = Channel;
//# sourceMappingURL=channel.js.map